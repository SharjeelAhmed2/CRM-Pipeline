{"version":3,"file":"content.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,yCAAyC;AAC/C,MAAM,4CAA4C;AAClD,MAAM,4CAA4C;AAClD,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,oBAAoB,wBAAwB,qDAAqD,yBAAyB,4CAA4C,sBAAsB,2BAA2B,uBAAuB;AACtS;AACA,gEAAgE,gCAAgC,oBAAoB,8FAA8F,qBAAqB,SAAS,iKAAiK,mCAAmC,2CAA2C,sCAAsC,sCAAsC,qCAAqC;AAChlB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wEAAwE,2BAA2B;AACnG,0CAA0C,+BAA+B;AACzE;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qDAAqD,mBAAmB,oBAAoB,2CAA2C,4BAA4B,wBAAwB,6BAA6B,iDAAiD,yBAAyB,uBAAuB;AACzT;AACA,uDAAuD,iBAAiB,kBAAkB,mBAAmB,oBAAoB,sCAAsC,yBAAyB;AAChM;AACA,iEAAiE,kBAAkB,gEAAgE,wHAAwH,+BAA+B,4CAA4C,qCAAqC,sCAAsC,+HAA+H,+BAA+B,4CAA4C,qCAAqC,uEAAuE,UAAU,2EAA2E,+BAA+B,sCAAsC,+BAA+B,+BAA+B,qCAAqC,kCAAkC,sHAAsH,+BAA+B,sCAAsC,+BAA+B,+BAA+B,qCAAqC,kCAAkC;AACtzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe,aAAa,mBAAmB,oBAAoB,0BAA0B,6CAA6C,oBAAoB,oBAAoB,uBAAuB;AAC5P;AACA;AACA;AACA,gDAAgD,mBAAmB,eAAe;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6DAA6D,2BAA2B,kCAAkC,2BAA2B,2BAA2B,iCAAiC,8BAA8B,+BAA+B;AAC9Q;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,2BAA2B,gCAAgC,wCAAwC,iCAAiC,8BAA8B;AAChO,2EAA2E,6EAA6E,8EAA8E,gBAAgB;AACtP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,gCAAgC;AAChC,2DAA2D,6BAA6B,0BAA0B,8BAA8B,oCAAoC,qCAAqC,gCAAgC;AACzP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UEjRA;UACA;UACA;UACA;UACA","sources":["webpack://gmail-crm-extension/./src/content.tsx","webpack://gmail-crm-extension/webpack/before-startup","webpack://gmail-crm-extension/webpack/startup","webpack://gmail-crm-extension/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// src/content.tsx\nconsole.log('Content script starting...');\nvar GMAIL_URL_PATTERN = 'https://mail.google.com';\n// Default stages\nvar defaultStages = [\n    { id: '1', name: 'Lead', color: '#718096' },\n    { id: '2', name: 'Pitched', color: '#4299E1' },\n    { id: '3', name: 'Waiting', color: '#9F7AEA' },\n    { id: '4', name: 'Closed', color: '#48BB78' }\n];\nfunction createStageElement(stage) {\n    console.log('Creating stage element:', stage.name);\n    var stageDiv = document.createElement('div');\n    stageDiv.className = 'pipeline-stage';\n    // Added for Email Drag and Drop \n    stageDiv.setAttribute('data-stage-id', stage.id);\n    // Log the created stage\n    console.log('Stage created with ID:', stage.id);\n    // Add drop zone styling and handlers\n    stageDiv.style.cssText = \"\\n    margin-bottom: 10px;\\n    padding: 10px;\\n    background: white;\\n    border-left: 4px solid \".concat(stage.color, \";\\n    border-radius: 4px;\\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\\n    cursor: pointer;\\n    transition: all 0.2s;\\n    min-height: 50px;\\n   \");\n    // Further modifying it for remove Button \n    stageDiv.innerHTML = \"\\n        <div style=\\\"display: flex; justify-content: space-between; align-items: center;\\\">\\n            <span>\".concat(stage.name, \"</span>\\n            <div style=\\\"display: flex; align-items: center; gap: 8px;\\\">\\n            <span class=\\\"stage-count\\\">0</span>\\n                            <button class=\\\"delete-stage\\\" style=\\\"\\n                    background: none;\\n                    border: none;\\n                    color:rgb(255, 0, 0);\\n                    cursor: pointer;\\n                    font-size: 18px;\\n                    padding: 0 4px;\\n                \\\">\\u00D7</button>\\n            </div>\\n        </div>\\n    \");\n    // Add delete functionality\n    var deleteBtn = stageDiv.querySelector('.delete-stage');\n    deleteBtn === null || deleteBtn === void 0 ? void 0 : deleteBtn.addEventListener('click', function (e) {\n        e.stopPropagation(); // Prevent stage click event\n        if (confirm(\"Are you sure you want to delete \\\"\".concat(stage.name, \"\\\" stage?\"))) {\n            // Remove from storage\n            chrome.storage.sync.get(['pipelineStages'], function (result) {\n                var currentStages = result.pipelineStages || defaultStages;\n                var updatedStages = currentStages.filter(function (s) { return s.id !== stage.id; });\n                chrome.storage.sync.set({ pipelineStages: updatedStages }, function () {\n                    // Remove from UI\n                    stageDiv.remove();\n                });\n            });\n        }\n    });\n    // Add drop zone event listeners\n    stageDiv.addEventListener('dragover', function (e) {\n        e.preventDefault();\n        stageDiv.style.backgroundColor = '#f0f5ff';\n        console.log(\"It Moved\");\n    });\n    stageDiv.addEventListener('dragleave', function (e) {\n        e.preventDefault();\n        stageDiv.style.backgroundColor = 'white';\n        console.log(\"It Left\");\n    });\n    stageDiv.addEventListener('drop', function (e) {\n        var _a;\n        e.preventDefault();\n        stageDiv.style.backgroundColor = 'white';\n        try {\n            var emailData = JSON.parse(((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData('text/plain')) || '');\n            addEmailToStage(emailData, stage, stageDiv);\n        }\n        catch (error) {\n            console.error('Error processing dropped email:', error);\n        }\n    });\n    stageDiv.addEventListener('mouseover', function () {\n        stageDiv.style.backgroundColor = '#f7fafc';\n    });\n    stageDiv.addEventListener('mouseout', function () {\n        stageDiv.style.backgroundColor = 'white';\n    });\n    return stageDiv;\n}\n/// For Add Stage Button Functionality \nfunction createAddStageForm() {\n    var modal = document.createElement('div');\n    modal.style.cssText = \"\\n        position: fixed;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: white;\\n        padding: 20px;\\n        border-radius: 8px;\\n        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\\n        z-index: 10001;\\n        width: 300px;\\n    \";\n    var overlay = document.createElement('div');\n    overlay.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        background: rgba(0,0,0,0.5);\\n        z-index: 10000;\\n    \";\n    var form = document.createElement('form');\n    form.innerHTML = \"\\n        <h3 style=\\\"margin-bottom: 15px; font-weight: bold;\\\">Add New Stage</h3>\\n        <div style=\\\"margin-bottom: 15px;\\\">\\n            <input type=\\\"text\\\" id=\\\"stageName\\\" placeholder=\\\"Stage Name\\\" style=\\\"\\n                width: 100%;\\n                padding: 8px;\\n                border: 1px solid #e2e8f0;\\n                border-radius: 4px;\\n                margin-bottom: 10px;\\n            \\\">\\n            <input type=\\\"color\\\" id=\\\"stageColor\\\" value=\\\"#718096\\\" style=\\\"\\n                width: 100%;\\n                height: 40px;\\n                border: 1px solid #e2e8f0;\\n                border-radius: 4px;\\n            \\\">\\n        </div>\\n        <div style=\\\"display: flex; gap: 10px;\\\">\\n            <button type=\\\"submit\\\" style=\\\"\\n                flex: 1;\\n                padding: 8px;\\n                background: #4299E1;\\n                color: white;\\n                border: none;\\n                border-radius: 4px;\\n                cursor: pointer;\\n            \\\">Add</button>\\n            <button type=\\\"button\\\" id=\\\"cancelBtn\\\" style=\\\"\\n                flex: 1;\\n                padding: 8px;\\n                background: #CBD5E0;\\n                color: white;\\n                border: none;\\n                border-radius: 4px;\\n                cursor: pointer;\\n            \\\">Cancel</button>\\n        </div>\\n    \";\n    modal.appendChild(form);\n    // Handle form submission \n    form.addEventListener('submit', function (e) {\n        e.preventDefault();\n        var nameInput = document.getElementById('stageName');\n        var colorInput = document.getElementById('stageColor');\n        var newStage = {\n            id: Date.now().toString(),\n            name: nameInput.value,\n            color: colorInput.value\n        };\n        // Get current stages and add new one\n        chrome.storage.sync.get(['pipelineStages'], function (result) {\n            var currentStages = result.pipelineStages || defaultStages;\n            var updatedStages = __spreadArray(__spreadArray([], currentStages, true), [newStage], false);\n            // Save updated stages\n            chrome.storage.sync.set({ pipelineStages: updatedStages }, function () {\n                // Add new stage to UI\n                var stagesContainer = document.getElementById('pipeline-stages');\n                if (stagesContainer) {\n                    stagesContainer.appendChild(createStageElement(newStage));\n                }\n                // Remove modal that we created when we clicked on Add Stage button\n                document.body.removeChild(modal);\n                document.body.removeChild(overlay);\n            });\n        });\n    });\n    // Handle cancel\n    var cancelBtn = form.querySelector('#cancelBtn');\n    cancelBtn === null || cancelBtn === void 0 ? void 0 : cancelBtn.addEventListener('click', function () {\n        document.body.removeChild(modal);\n        document.body.removeChild(overlay);\n    });\n    // Add modal and overlay to page\n    document.body.appendChild(overlay);\n    document.body.appendChild(modal);\n}\n// For Sidebar\nfunction createSidebar() {\n    console.log('Creating sidebar');\n    var sidebar = document.createElement('div');\n    sidebar.id = 'gmail-crm-sidebar';\n    sidebar.style.cssText = \"\\n    position: fixed;\\n    right: 0;\\n    top: 0;\\n    width: 250px;\\n    height: 100vh;\\n    background: #f8fafc;\\n    box-shadow: -2px 0 5px rgba(0,0,0,0.1);\\n    z-index: 1000;\\n    padding: 20px;\\n    overflow-y: auto;\\n\";\n    // Add title\n    var title = document.createElement('h2');\n    title.textContent = 'CRM Pipeline';\n    title.style.cssText = 'margin-bottom: 15px; font-weight: bold; color: #2d3748;';\n    sidebar.appendChild(title);\n    //Stages Work\n    // Get stages from storage or use defaults\n    //This is Chrome's storage API that syncs data across user's browsers\n    chrome.storage.sync.get(['pipelineStages'], function (result) {\n        var stages = result.pipelineStages || defaultStages;\n        // Create stages container\n        var stagesContainer = document.createElement('div');\n        stagesContainer.id = 'pipeline-stages';\n        console.log('Created pipeline-stages container');\n        // stages.forEach(stage => {\n        //     stagesContainer.appendChild(createStageElement(stage));\n        // });\n        // Explicitly type the stage parameter\n        stages.forEach(function (stage) {\n            stagesContainer.appendChild(createStageElement(stage));\n        });\n        sidebar.appendChild(stagesContainer);\n        // Add \"Add Stage\" button\n        var addButton = document.createElement('button');\n        addButton.textContent = '+ Add Stage';\n        addButton.style.cssText = \"\\n            width: 100%;\\n            padding: 8px;\\n            background: #4299E1;\\n            color: white;\\n            border: none;\\n            border-radius: 4px;\\n            cursor: pointer;\\n            margin-top: 10px;\\n        \";\n        addButton.addEventListener('click', createAddStageForm);\n        sidebar.appendChild(addButton);\n    });\n    // Add to page\n    document.body.appendChild(sidebar);\n    // Adjust Gmail's main content\n    var gmailContent = document.querySelector('.bkK');\n    if (gmailContent) {\n        gmailContent.style.marginRight = '250px';\n    }\n}\n// Add this new function to handle adding emails to stages\nfunction addEmailToStage(emailData, stage, stageDiv) {\n    var emailElement = document.createElement('div');\n    emailElement.className = 'pipeline-email';\n    emailElement.style.cssText = \"\\n            margin: 8px 0;\\n            padding: 8px;\\n            background: white;\\n            border: 1px solid #e2e8f0;\\n            border-radius: 4px;\\n            font-size: 12px;\\n        \";\n    emailElement.innerHTML = \"\\n            <div style=\\\"font-weight: bold;\\\">\".concat(emailData.subject, \"</div>\\n            <div style=\\\"color: #666;\\\">\").concat(emailData.sender, \"</div>\\n            <div style=\\\"color: #888; font-size: 11px;\\\">\").concat(emailData.timestamp, \"</div>\\n        \");\n    // Find or create the emails container in the stage\n    var emailsContainer = stageDiv.querySelector('.stage-emails');\n    if (!emailsContainer) {\n        emailsContainer = document.createElement('div');\n        emailsContainer.className = 'stage-emails';\n        stageDiv.appendChild(emailsContainer);\n    }\n    emailsContainer.appendChild(emailElement);\n    // Update the count\n    var countElement = stageDiv.querySelector('.stage-count');\n    if (countElement) {\n        var currentCount = parseInt(countElement.textContent || '0');\n        countElement.textContent = (currentCount + 1).toString();\n    }\n    // Save to storage\n    saveEmailToStage(emailData, stage.id);\n}\n// 5:11 AM on Friday the 10th \n// Add this function to save email data to storage\nfunction saveEmailToStage(emailData, stageId) {\n    chrome.storage.sync.get(['emailStages'], function (result) {\n        var emailStages = result.emailStages || {};\n        if (!emailStages[stageId]) {\n            emailStages[stageId] = [];\n        }\n        emailStages[stageId].push(emailData);\n        chrome.storage.sync.set({ emailStages: emailStages });\n    });\n}\n/// Email Dragable Function\nfunction makeEmailDraggable(emailRow) {\n    var _a;\n    console.log('Starting makeEmailDraggable for:', (_a = emailRow.querySelector('[role=\"link\"]')) === null || _a === void 0 ? void 0 : _a.textContent);\n    emailRow.setAttribute('draggable', 'true');\n    emailRow.style.cursor = 'grab'; // Set cursor immediately\n    // Add a visible drag handle to the email row\n    var dragHandle = document.createElement('div');\n    dragHandle.innerHTML = '⋮'; // Three dots indicating draggable\n    dragHandle.style.cssText = \"\\n            cursor: grab;\\n            padding: 0 5px;\\n            color: #666;\\n            font-size: 16px;\\n            display: inline-block;\\n            vertical-align: middle;\\n            user-select: none;\\n        \";\n    console.log('Drag handle created');\n    // Insert the drag handle at the beginning of the email row\n    var firstCell = emailRow.querySelector('td');\n    if (firstCell) {\n        firstCell.insertBefore(dragHandle, firstCell.firstChild);\n        console.log('Drag handle inserted into email row');\n    }\n    else {\n        console.log('Failed to find first cell in email row');\n    }\n}\nfunction observeGmailInbox() {\n    // Gmail's main content area usually has role=\"main\"\n    var targetNode = document.querySelector('[role=\"main\"]');\n    if (!targetNode) {\n        //console.log('Gmail main content area not found, retrying...');\n        console.log('🔍 Gmail main content area not found, retrying...');\n        setTimeout(observeGmailInbox, 1000);\n        return;\n    }\n    // console.log('Found Gmail main content area, setting up observer');\n    console.log('✅ Found Gmail main content area');\n    createSidebar(); // Add sidebar when we find the main content\n    // A MutationObserver is created to monitor changes in the DOM (Document Object Model) of the targetNode.\n    var observer = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n            // Look for email rows\n            var emailRows = document.querySelectorAll('tr[role=\"row\"]');\n            if (emailRows.length > 0) {\n                //   console.log('Emails foundfffff:', emailRows.length);\n                console.log(\"\\uD83D\\uDCE7 Found \".concat(emailRows.length, \" email rows\"));\n                // We'll process these emails later\n                emailRows.forEach(function (row) {\n                    var _a;\n                    // Makes Emails Draggeable \n                    if (!row.getAttribute('data-crm-initialized')) {\n                        var subject = (_a = row.querySelector('[role=\"link\"]')) === null || _a === void 0 ? void 0 : _a.textContent;\n                        console.log(\"\\uD83C\\uDFAF Making email draggable: \".concat(subject === null || subject === void 0 ? void 0 : subject.slice(0, 30), \"...\"));\n                        makeEmailDraggable(row);\n                        row.setAttribute('data-crm-initialized', 'true');\n                    }\n                });\n            }\n        });\n    });\n    //Changes in child elements (childList: true).\n    //Changes deep within the DOM tree (subtree: true).\n    observer.observe(targetNode, {\n        childList: true,\n        subtree: true\n    });\n}\nvar init = function () {\n    if (!window.location.origin.includes(GMAIL_URL_PATTERN)) {\n        return;\n    }\n    console.log('Gmail detected, starting observer');\n    observeGmailInbox();\n};\n// Start when page loads\nwindow.addEventListener('load', init);\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/content.tsx\"]();\n",""],"names":[],"sourceRoot":""}